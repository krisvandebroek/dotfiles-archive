# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Find text recursively in files, optionally with inclusion pattern (extension) for quicker searches
# -i : ignore-case
# -I : ignore binary files
# -r : recursive
# --include : only search in files with the given extension
function gr() {
	if [ -z "$1" ]; then
		echo "Usage: gr [fileExtension] searchPattern";
		echo "Example: gr java //TODO";
	else
		if [ -n "$2" ]; then
			if [[ $1 =~ .*\..* ]]; then
				grep -i -I -r --include="$1" "$2" .;
			else
				grep -i -I -r --include="*.$1" "$2" .;
			fi
		else
			grep -i -I -r "$1" .;
		fi
	fi
}

# Update the version of all modules in a maven multi-module project to a given version
function mvn-version-bump() {
	if [ -z "$1" ]; then
		echo "Usage: mvn-version-bump <new-version-number>";
		echo "Example: mvn-version-bump 1.0.0-SNAPSHOT";
	else 
		mvn -U --batch-mode release:update-versions -DdevelopmentVersion=$1;
	fi
}

# Generate a file listing for the current directories and subdirectories. Place the listing in the given location
# Use the output and diff to compare two directories
function gen-file-list() {
	if [ -z "$1" ]; then
		echo "Usage: gen-file-list <output-location>";
		echo "Example: gen-file-list ~/Documents/my-generated-list.txt";
	else 
		find . -type f -print0 | xargs -0 stat -f '%N %z' | sort > $1;
	fi
}

function cleanUpRecentPlaces() {
	recentPlaces=$(defaults read .GlobalPreferences NSNavRecentPlaces);
	for recentPlace in ${recentPlaces//,/}
	do 
	  echo $recentPlace;
	done
	echo $recentPlaces;
}

